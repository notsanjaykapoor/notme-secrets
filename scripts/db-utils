#!/usr/bin/env python

import os
import re
import subprocess
import sys

sys.path.insert(1, os.path.join(sys.path[0], ".."))

import dot_init

import click
import ulid

import models # required for migrate init
import services.console
import services.database.session

POSTGRES_REGEX = r"(postgres|postgresql):\/\/([^:]+:[^@]+)@([^:]+):(\d+)\/(.*)"


@click.group()
def cli():
    pass


@click.command()
@click.option("--db-url", default=None, required=False, help="backup database url")
@click.option(
    "--output-file", default="", required=False, help="backup output file name"
)
@click.option(
    "--format",
    default="archive",
    required=False,
    help="backup output file format, e.g. 'archive', 'text'",
)
@click.pass_context
def backup(ctx, db_url: str, output_file: str, format: str) -> dict:
    """
    Backup database, if db_url is not specified then use env 'DATABASE_URL'
    """
    db_url = db_url or os.environ.get("DATABASE_URL")

    output_file = output_file or f"backup.{ulid.new().str}.{format}.sql"

    match = re.match(rf"{POSTGRES_REGEX}", db_url)
    _user_password, host, port, db_name = (match[2], match[3], match[4], match[5])

    print(
        f"db backup '{host}:{port}' db '{db_name}' format '{format}' to file '{output_file}'",
        end=" ... ",
        flush=True,
    )

    if format == "archive":
        format_str = "--format=c"  # compressed archive
    elif format == "text":
        format_str = "--format=p"  # plaintext
    else:
        format_str = "--format=c"  # compressed archive

    backup_cmd = (
        f"pg_dump -d {db_url} {format_str} --no-owner --no-acl --file {output_file}"
    )

    result = subprocess.run(backup_cmd.split(" "), check=True, capture_output=True)

    if result.returncode != 0:
        services.console.print_error(f"error {result.returncode}")
        exit(result.returncode)

    services.console.print_ok("ok")


@click.command()
@click.option("--env", default="dev", required=False, help="app environment, e.g. dev, tst")
def create(env: str) -> list[str]:
    """
    create database
    """
    env_map = {
        "dev": os.environ.get("DATABASE_URL"),
        "tst": os.environ.get("DATABASE_TEST_URL"),
    }

    db_url = env_map.get(env, "")

    if not db_url:
        raise ValueError(f"env '{env}' invalid")

    db_name = db_url.split("/")[-1]

    print(f"create db '{db_name}'", end=" ... ", flush=True)

    if services.database.session.check(url=db_url) == 0:
        _print_ok("exists") # database exists

    services.database.session.create(url=db_url)

    _print_ok("ok")


@click.command()
@click.option("--name", required=True, help="migration name")
def migrate_create(name: str) -> dict:
    """
    create migration using alemic autogenerate; migration file is added to migrations/version directory.
    """
    cmd = f"alembic revision --autogenerate -m \"{name}\""

    _print_status(cmd)

    result = subprocess.run(cmd, shell=True)

    if result.returncode != 0:
        _print_error(f"{cmd} error {result.returncode}")
        exit(result.returncode)

    _print_ok(f"{cmd} ok")


@click.command()
def migrate_init() -> list[str]:
    """
    run migrations based on models directory; used in test environments or anywhere where a complete 0 to 1 migration is required
    """
    print("db migrate", end=" ... ")
    services.database.session.migrate()
    _print_ok("ok")


@click.command()
@click.option("--revision", required=False, default="head", help="migration revision")
def migrate_up(revision: str) -> dict:
    """
    run migration(s) in migrations/version directory, use 'revision' if specified, otherwise run all pending migrations
    """
    db_uri = os.environ.get("DATABASE_URL")
    psql_cmd = f"psql -d {db_uri} -c 'select version_num from public.alembic_version'"

    alembic_cmd = f"alembic upgrade {revision}"

    _print_status(alembic_cmd)

    subprocess.run(psql_cmd, shell=True)

    alembic_result = subprocess.run(alembic_cmd, shell=True)

    if alembic_result.returncode != 0:
        _print_error(f"{alembic_cmd} error {alembic_result.returncode}")
        exit(alembic_result.returncode)

    subprocess.run(psql_cmd, shell=True)

    _print_ok(f"{alembic_cmd} ok")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m")


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m")


def _print_status(s: str):
    print("\x1b[1;33m" + s + "\x1b[0m")


cli.add_command(backup)
cli.add_command(create)
cli.add_command(migrate_init)
cli.add_command(migrate_create)
cli.add_command(migrate_up)

if __name__ == "__main__":
    cli()

